show databases

use sales;

db.createCollection("products");

db.products.insertOne({"product_id":1, "product_name":"Laptop", "category":"electronics", "price":57990})

db.products.insertMany([{"product_id":2, "product_name":"Smart Phone", "category":"Mobile & Accessory", "price":79990},
{"product_id":3, "product_name":"Digital Camera", "category":"electronics", "price":35990}])

-- To Show all Documents
db.products.find()

-- To show document using filter
db.products.find({"product_id": 2})

-- To show document / records from products which is greater than 50000.
db.products.find({price: {$gt: 50000}})

-- To show document / records from products less than 50000.
db.products.find({price: {$lt: 50000}})

-- To show reords greater than equal to 50000
db.products.find({price: {$lte: 50000}})

-- To show reords less than equal to 50000
db.products.find({price: {$gte: 50000}})

-- Update One Record.
db.products.updateOne(
	{"product_id": 1},
	{$set:{"discount":.10}})

-- Update Multiple Records
db.products.updateMany(
	{"category": "electronics"},
	{$set:{"discount":.15}}
)

db.products.deleteOne({"product_id":1})

db.products.deleteMany({"product_id":1})

db.products.deleteMany({"price":{$lte:50000}})

db.products.deleteMany({"price":{$lte:50000},"discount":{$gte:0.5}})

-- Show Number of Documents / Records in Collection
db.products.countDocuments()

-- Drop Database 
db.dropDatabase()

-- Drop collection using collection name
db.products.drop()

----------------------------------------------------------------------------
1. use restaurants;
db.createCollection("restaurant");

2. db.getCollectionInfos()
db.getCollectionNames()
db.restaurant.countDocuments()
db.restaurant.find()


3. To show specific field / schema of collection use projection.
db.restaurant.find({query},{projection})

-- To show restaurant_id, name, borough, zipcode which is in address and field "_id".
db.restaurant.find({},{restaurant_id:1,name:1,borough:1,"address.zipcode":1,_id:0})

db.restaurant.find({cuisine:"American "},{restaurant_id:1,name:1,borough:1,"address.zipcode":1,_id:0})

-- Show all restaurants with first score > 2
db.restaurant.find({'grades.0.score':{$gt:2}})

db.restaurant.aggregate([
{$unwind:"$grades"},
  {"$group": {_id:"$_id", totalScore: {$sum: "$grades.score"}}}
])

-- 4. 
db.restaurant.find({"grades.score":{$gte: 90}})

-- 4. Show all records with sum of score is greater than 200
db.restaurant.aggregate([
{$unwind:"$grades"},
  {"$group": {_id:"$_id", totalScore: {$sum: "$grades.score"}}}
])


db.restaurant.aggregate([
{$unwind:"$grades"},
  {"$group": {_id:"$restaurant_id", totalScore: {$sum: "$grades.score"},
   name:{$first:"$name"}, cuisine:{$first:"$cuisine"}, address:{$first:"$address"}}},
  {$match:{totalScore:{$gte:90}}}
])

-- 5.
db.restaurant.find({"grades.score":{$gt: 80, $lt: 100}}).pretty()

db.restaurant.find({"grades.score":{$gt: 50},
                   "cuisine":"Bakery"}).pretty()

db.restaurant.find({"grades.score":{$gt: 20},
                    "restaurant_id":{$gte: "3000000"}}).pretty()

$or
db.restaurant.find({$or: [{"grades.score":{$gt: 90}},
                    {"restaurant_id":{$gte: "4000000"}}]}).pretty()

$and
db.restaurant.find({$and: [{"grades.score":{$gte: 30}},
                    {"restaurant_id":{$gte: "4000000"}}]}).pretty()

$not
db.restaurant.find({"cuisine":{$not: /^Bakery$/}}).pretty()

$ne : Not Equal To
db.restaurant.find({"cuisine":{$ne: "Bakery"}}).pretty()

-- 6. 
db.restaurant.find({$and: [{"cuisine":{$ne:"American "}},
                           {"grades.score":{$gt:70}}]})

-- 7. 
-- $sort
db.restaurant.find().sort({"cuisine":1, "borough":-1}).pretty()

-- 9. 
db.restaurant.find({
$or:[
  {cuisine:{$nin:["American ","Chinese"]}},
  {name:{$regex:/^Bil/}}
]
}, {_id:0,restaurant_id:1,name:1,borough:1,cuisine:1}).pretty();

or

db.restaurant.find({
$or:[
  {cuisine:{$nin:["American ","Chinese"]}},
  {name:{$regex:/^Bil/}}
]
},{"_id":0,"restaurant_id":1,"name":1,"borough":1,"cuisine":1}).pretty();

-- 10.

db.restaurant.find({cuisine:"Indian"},
{restaurant_id:1,name:1,borough:1,cuisine:1,maxScore:{$max:"$grades.score"}})

-- 11.
db.restaurant.find({
name: {$regex: /bi$/}
},{restaurant_id:1,name:1,borough:1,cuisine:1,"grades.score": 1}).pretty()

--12. 
db.restaurant.find({
name: {$regex: /il/}
},{restaurant_id:1,name:1,borough:1,cuisine:1,"grades.score": 1}).pretty()

-- 14. 
db.restaurant.find({"grades.score":{$mod:[7,0]}},
{restaurant_id:1,name:1,borough:1,cuisine:1,"grades.score":1}).pretty()

-- 15.
db.restaurant.countDocuments({"address.street":{$exists:true}})
db.restaurant.countDocuments({"address.street":{$exists:false}})

-16. 
db.restaurant.find({
cuisine: {$ne:"American "},
"grades.score": {$gt:70},
"address.coord.1": {$lt:65.754168}
})







